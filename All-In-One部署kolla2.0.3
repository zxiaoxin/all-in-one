kolla项目目前更新到3.0.0，而本实验部署的是kolla的tag2.0.3

虚拟机基本环境：

centos7.2双网卡
docker版本：1.12.1
ansible：1.9.4 #在2.0.3上ansible的版本不能高于2.0.0，在3.0.0上是允许的
IP：192.168.101.46
主机名：localhost


systemctl stop firewalld && systemctl disable firewalld
#实验环境下不想麻烦直接关闭防火墙了，如果是在服务器上要配置iptables保证安全

vim /etc/hosts
192.168.101.46 localhost
127.0.0.1 localhost
安装依赖：
yum install -y epel-release 
yum install -y python-pip
pip install --upgrade pip
yum install -y python-devel libffi-devel openssl-devel gcc vim git python-setuptools wget
安装ansible1.9.6：
yum install ansible1.9.noarch #在这边ansible的版本不要高于2.0.0，不然在kolla-ansible检测时会报错

[root@CentOS ~]# yum install ansible1.9.noarch
Loaded plugins: fastestmirror, langpacks
Loading mirror speeds from cached hostfile
 * base: mirrors.aliyun.com
 * epel: mirror01.idc.hinet.net
 * extras: mirrors.aliyun.com
 * updates: mirrors.aliyun.com
Resolving Dependencies
--> Running transaction check
---> Package ansible1.9.noarch 0:1.9.6-2.el7 will be installed
--> Processing Dependency: sshpass for package: ansible1.9-1.9.6-2.el7.noarch
--> Processing Dependency: python-paramiko for package: ansible1.9-1.9.6-2.el7.noarch
--> Processing Dependency: python-keyczar for package: ansible1.9-1.9.6-2.el7.noarch
--> Processing Dependency: python-jinja2 for package: ansible1.9-1.9.6-2.el7.noarch
--> Processing Dependency: python-httplib2 for package: ansible1.9-1.9.6-2.el7.noarch
--> Processing Dependency: PyYAML for package: ansible1.9-1.9.6-2.el7.noarch
--> Running transaction check
---> Package PyYAML.x86_64 0:3.10-11.el7 will be installed
.......
Installed:
  ansible1.9.noarch 0:1.9.6-2.el7                                                                                                                                      

Dependency Installed:
  PyYAML.x86_64 0:3.10-11.el7                libtomcrypt.x86_64 0:1.17-23.el7         libtommath.x86_64 0:0.42.0-4.el7        libyaml.x86_64 0:0.1.4-11.el7_0        
  python-babel.noarch 0:0.9.6-8.el7          python-httplib2.noarch 0:0.7.7-3.el7     python-jinja2.noarch 0:2.7.2-2.el7      python-keyczar.noarch 0:0.71c-2.el7    
  python-markupsafe.x86_64 0:0.11-10.el7     python-pyasn1.noarch 0:0.1.6-2.el7       python2-crypto.x86_64 0:2.6.1-9.el7     python2-ecdsa.noarch 0:0.13-4.el7      
  python2-paramiko.noarch 0:1.16.1-1.el7     sshpass.x86_64 0:1.05-5.el7             

Complete!
[root@CentOS ~]# ansible --version
ansible 1.9.6
  configured module search path = None

安装docker：
curl -sSL https://get.docker.io | bash #版本是1.12.1, build 23cf638 

[root@localhost ~]# curl -sSL https://get.docker.io | bash
+ sh -c 'sleep 3; yum -y -q install docker-engine'
warning: /var/cache/yum/x86_64/7/docker-main-repo/packages/docker-engine-selinux-1.12.1-1.el7.centos.noarch.rpm: Header V4 RSA/SHA512 Signature, key ID 2c52609d: NOKEY
docker-engine-selinux-1.12.1-1.el7.centos.noarch.rpm 的公钥尚未安装
导入 GPG key 0x2C52609D:
 用户ID     : "Docker Release Tool (releasedocker) <docker@docker.com>"
 指纹       : 5811 8e89 f3a9 1289 7c07 0adb f762 2157 2c52 609d
 来自       : https://yum.dockerproject.org/gpg
restorecon:  lstat(/var/lib/docker) failed:  No such file or directory
warning: %post(docker-engine-selinux-1.12.1-1.el7.centos.noarch) scriptlet failed, exit status 255
Non-fatal POSTIN scriptlet failure in rpm package docker-engine-selinux-1.12.1-1.el7.centos.noarch

If you would like to use Docker as a non-root user, you should now consider
adding your user to the "docker" group with something like:

  sudo usermod -aG docker your-user

Remember that you will have to log out and back in for this to take effect!

[root@localhost ~]# docker --version
Docker version 1.12.1, build 23cf638

配置docker文件，启动MountFlags选项，默认未开启，未配置会在deploy时 neutron-dhcp-agent容器抛出APIError/HTTPError：
mkdir -p /etc/systemd/system/docker.service.d

tee /etc/systemd/system/docker.service.d/kolla.conf <<-'EOF'
[Service]
MountFlags=shared
EOF

加载配置文件设置自启，并启动docker服务：
systemctl daemon-reload && systemctl enable docker && systemctl start docker

[root@localhost ~]# systemctl daemon-reload && systemctl enable docker && systemctl start docker
Created symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.

下载kolla代码：
git clone https://git.openstack.org/openstack/kolla -b stable/mitaka

安装kolla：
pip install kolla/ 

cd kolla/

安装tox：
pip install -U tox

安装openstackclient跟neutronclient
pip install -U python-openstackclient python-neutronclient

安装依赖
pip install -r requirements.txt -r test-requirements.txt

生成kolla-build.conf配置文件：
tox -e genconfig

复制配置文件到/etc目录下
cp -rv etc/kolla /etc/

kolla-build --base centos --type source -p default
#这边选择build基础的镜像，如果业务上需求，去掉-p default就build全部
#如果出现build错误，可以单独build，
#镜像下来，就完成一大步啦

vim /etc/kolla/passwords.yml
kolla_install_type: "source"
kolla_internal_address: "192.168.101.147" #这个IP要跟端口同一个网段并且未被使用
network_interface: "enp4s0.2"
neutron_external_interface: "enp4s0.3"

kolla-genpwd
#生成密码，也可以自己去配置

kolla-ansible prechecks
#检查端口，IP，ansible等配置

kolla-ansible deploy #开始部署容器
#没有错误就是成功啦

kolla-ansible post-deploy

cat /etc/kolla/admin-openrc.sh 
#查看dashboard的登录信息

sourch /etc/kolla/admin-openrc.sh

kolla/tools/init-runonce
#初始化一个镜像跟网络

